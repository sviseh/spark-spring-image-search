/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ebay.coreai;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Item extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5843690110403015287L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Item\",\"namespace\":\"com.ebay.coreai\",\"fields\":[{\"name\":\"itemId\",\"type\":[\"long\",\"null\"]},{\"name\":\"leaf_categ_id\",\"type\":[\"long\",\"null\"]},{\"name\":\"gallery_url\",\"type\":[\"string\",\"null\"]},{\"name\":\"embedding\",\"type\":[{\"type\":\"array\",\"items\":[\"float\",\"null\"]},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Item> ENCODER =
      new BinaryMessageEncoder<Item>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Item> DECODER =
      new BinaryMessageDecoder<Item>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Item> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Item> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Item> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Item>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Item to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Item from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Item instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Item fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.Long itemId;
   private java.lang.Long leaf_categ_id;
   private java.lang.CharSequence gallery_url;
   private java.util.List<java.lang.Float> embedding;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Item() {}

  /**
   * All-args constructor.
   * @param itemId The new value for itemId
   * @param leaf_categ_id The new value for leaf_categ_id
   * @param gallery_url The new value for gallery_url
   * @param embedding The new value for embedding
   */
  public Item(java.lang.Long itemId, java.lang.Long leaf_categ_id, java.lang.CharSequence gallery_url, java.util.List<java.lang.Float> embedding) {
    this.itemId = itemId;
    this.leaf_categ_id = leaf_categ_id;
    this.gallery_url = gallery_url;
    this.embedding = embedding;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return itemId;
    case 1: return leaf_categ_id;
    case 2: return gallery_url;
    case 3: return embedding;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: itemId = (java.lang.Long)value$; break;
    case 1: leaf_categ_id = (java.lang.Long)value$; break;
    case 2: gallery_url = (java.lang.CharSequence)value$; break;
    case 3: embedding = (java.util.List<java.lang.Float>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'itemId' field.
   * @return The value of the 'itemId' field.
   */
  public java.lang.Long getItemId() {
    return itemId;
  }


  /**
   * Sets the value of the 'itemId' field.
   * @param value the value to set.
   */
  public void setItemId(java.lang.Long value) {
    this.itemId = value;
  }

  /**
   * Gets the value of the 'leaf_categ_id' field.
   * @return The value of the 'leaf_categ_id' field.
   */
  public java.lang.Long getLeafCategId() {
    return leaf_categ_id;
  }


  /**
   * Sets the value of the 'leaf_categ_id' field.
   * @param value the value to set.
   */
  public void setLeafCategId(java.lang.Long value) {
    this.leaf_categ_id = value;
  }

  /**
   * Gets the value of the 'gallery_url' field.
   * @return The value of the 'gallery_url' field.
   */
  public java.lang.CharSequence getGalleryUrl() {
    return gallery_url;
  }


  /**
   * Sets the value of the 'gallery_url' field.
   * @param value the value to set.
   */
  public void setGalleryUrl(java.lang.CharSequence value) {
    this.gallery_url = value;
  }

  /**
   * Gets the value of the 'embedding' field.
   * @return The value of the 'embedding' field.
   */
  public java.util.List<java.lang.Float> getEmbedding() {
    return embedding;
  }


  /**
   * Sets the value of the 'embedding' field.
   * @param value the value to set.
   */
  public void setEmbedding(java.util.List<java.lang.Float> value) {
    this.embedding = value;
  }

  /**
   * Creates a new Item RecordBuilder.
   * @return A new Item RecordBuilder
   */
  public static com.ebay.coreai.Item.Builder newBuilder() {
    return new com.ebay.coreai.Item.Builder();
  }

  /**
   * Creates a new Item RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Item RecordBuilder
   */
  public static com.ebay.coreai.Item.Builder newBuilder(com.ebay.coreai.Item.Builder other) {
    if (other == null) {
      return new com.ebay.coreai.Item.Builder();
    } else {
      return new com.ebay.coreai.Item.Builder(other);
    }
  }

  /**
   * Creates a new Item RecordBuilder by copying an existing Item instance.
   * @param other The existing instance to copy.
   * @return A new Item RecordBuilder
   */
  public static com.ebay.coreai.Item.Builder newBuilder(com.ebay.coreai.Item other) {
    if (other == null) {
      return new com.ebay.coreai.Item.Builder();
    } else {
      return new com.ebay.coreai.Item.Builder(other);
    }
  }

  /**
   * RecordBuilder for Item instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Item>
    implements org.apache.avro.data.RecordBuilder<Item> {

    private java.lang.Long itemId;
    private java.lang.Long leaf_categ_id;
    private java.lang.CharSequence gallery_url;
    private java.util.List<java.lang.Float> embedding;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ebay.coreai.Item.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.itemId)) {
        this.itemId = data().deepCopy(fields()[0].schema(), other.itemId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.leaf_categ_id)) {
        this.leaf_categ_id = data().deepCopy(fields()[1].schema(), other.leaf_categ_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.gallery_url)) {
        this.gallery_url = data().deepCopy(fields()[2].schema(), other.gallery_url);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.embedding)) {
        this.embedding = data().deepCopy(fields()[3].schema(), other.embedding);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Item instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ebay.coreai.Item other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.itemId)) {
        this.itemId = data().deepCopy(fields()[0].schema(), other.itemId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.leaf_categ_id)) {
        this.leaf_categ_id = data().deepCopy(fields()[1].schema(), other.leaf_categ_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.gallery_url)) {
        this.gallery_url = data().deepCopy(fields()[2].schema(), other.gallery_url);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.embedding)) {
        this.embedding = data().deepCopy(fields()[3].schema(), other.embedding);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'itemId' field.
      * @return The value.
      */
    public java.lang.Long getItemId() {
      return itemId;
    }


    /**
      * Sets the value of the 'itemId' field.
      * @param value The value of 'itemId'.
      * @return This builder.
      */
    public com.ebay.coreai.Item.Builder setItemId(java.lang.Long value) {
      validate(fields()[0], value);
      this.itemId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'itemId' field has been set.
      * @return True if the 'itemId' field has been set, false otherwise.
      */
    public boolean hasItemId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'itemId' field.
      * @return This builder.
      */
    public com.ebay.coreai.Item.Builder clearItemId() {
      itemId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'leaf_categ_id' field.
      * @return The value.
      */
    public java.lang.Long getLeafCategId() {
      return leaf_categ_id;
    }


    /**
      * Sets the value of the 'leaf_categ_id' field.
      * @param value The value of 'leaf_categ_id'.
      * @return This builder.
      */
    public com.ebay.coreai.Item.Builder setLeafCategId(java.lang.Long value) {
      validate(fields()[1], value);
      this.leaf_categ_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'leaf_categ_id' field has been set.
      * @return True if the 'leaf_categ_id' field has been set, false otherwise.
      */
    public boolean hasLeafCategId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'leaf_categ_id' field.
      * @return This builder.
      */
    public com.ebay.coreai.Item.Builder clearLeafCategId() {
      leaf_categ_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'gallery_url' field.
      * @return The value.
      */
    public java.lang.CharSequence getGalleryUrl() {
      return gallery_url;
    }


    /**
      * Sets the value of the 'gallery_url' field.
      * @param value The value of 'gallery_url'.
      * @return This builder.
      */
    public com.ebay.coreai.Item.Builder setGalleryUrl(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.gallery_url = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'gallery_url' field has been set.
      * @return True if the 'gallery_url' field has been set, false otherwise.
      */
    public boolean hasGalleryUrl() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'gallery_url' field.
      * @return This builder.
      */
    public com.ebay.coreai.Item.Builder clearGalleryUrl() {
      gallery_url = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'embedding' field.
      * @return The value.
      */
    public java.util.List<java.lang.Float> getEmbedding() {
      return embedding;
    }


    /**
      * Sets the value of the 'embedding' field.
      * @param value The value of 'embedding'.
      * @return This builder.
      */
    public com.ebay.coreai.Item.Builder setEmbedding(java.util.List<java.lang.Float> value) {
      validate(fields()[3], value);
      this.embedding = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'embedding' field has been set.
      * @return True if the 'embedding' field has been set, false otherwise.
      */
    public boolean hasEmbedding() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'embedding' field.
      * @return This builder.
      */
    public com.ebay.coreai.Item.Builder clearEmbedding() {
      embedding = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Item build() {
      try {
        Item record = new Item();
        record.itemId = fieldSetFlags()[0] ? this.itemId : (java.lang.Long) defaultValue(fields()[0]);
        record.leaf_categ_id = fieldSetFlags()[1] ? this.leaf_categ_id : (java.lang.Long) defaultValue(fields()[1]);
        record.gallery_url = fieldSetFlags()[2] ? this.gallery_url : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.embedding = fieldSetFlags()[3] ? this.embedding : (java.util.List<java.lang.Float>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Item>
    WRITER$ = (org.apache.avro.io.DatumWriter<Item>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Item>
    READER$ = (org.apache.avro.io.DatumReader<Item>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.itemId == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeLong(this.itemId);
    }

    if (this.leaf_categ_id == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeLong(this.leaf_categ_id);
    }

    if (this.gallery_url == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.gallery_url);
    }

    if (this.embedding == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      long size0 = this.embedding.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.Float e0: this.embedding) {
        actualSize0++;
        out.startItem();
        if (e0 == null) {
          out.writeIndex(1);
          out.writeNull();
        } else {
          out.writeIndex(0);
          out.writeFloat(e0);
        }
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 0) {
        in.readNull();
        this.itemId = null;
      } else {
        this.itemId = in.readLong();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.leaf_categ_id = null;
      } else {
        this.leaf_categ_id = in.readLong();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.gallery_url = null;
      } else {
        this.gallery_url = in.readString(this.gallery_url instanceof Utf8 ? (Utf8)this.gallery_url : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.embedding = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.Float> a0 = this.embedding;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.Float>((int)size0, SCHEMA$.getField("embedding").schema().getTypes().get(0));
          this.embedding = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.Float> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.Float e0 = (ga0 != null ? ga0.peek() : null);
            if (in.readIndex() != 0) {
              in.readNull();
              e0 = null;
            } else {
              e0 = in.readFloat();
            }
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 0) {
            in.readNull();
            this.itemId = null;
          } else {
            this.itemId = in.readLong();
          }
          break;

        case 1:
          if (in.readIndex() != 0) {
            in.readNull();
            this.leaf_categ_id = null;
          } else {
            this.leaf_categ_id = in.readLong();
          }
          break;

        case 2:
          if (in.readIndex() != 0) {
            in.readNull();
            this.gallery_url = null;
          } else {
            this.gallery_url = in.readString(this.gallery_url instanceof Utf8 ? (Utf8)this.gallery_url : null);
          }
          break;

        case 3:
          if (in.readIndex() != 0) {
            in.readNull();
            this.embedding = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.Float> a0 = this.embedding;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.Float>((int)size0, SCHEMA$.getField("embedding").schema().getTypes().get(0));
              this.embedding = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.Float> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.Float e0 = (ga0 != null ? ga0.peek() : null);
                if (in.readIndex() != 0) {
                  in.readNull();
                  e0 = null;
                } else {
                  e0 = in.readFloat();
                }
                a0.add(e0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










